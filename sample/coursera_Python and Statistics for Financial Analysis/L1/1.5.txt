In this video, you will learn how to build a simple strategy of stock trading. The target of this video is not to teach you how to make money by trading stock. Instead, we hope with this money-making case, you are highly motivated to learn Python we covered so far, and get ready for the next several topics. As mentioned in the last video, Moving Average of short period is more closely associated with recent change of stock price, which we call Fast Signal. Moving Average over long period reflects the price change over long-term history, which we call slow signal. We create MA10 and MA50, which are fast signal and slow signal respectively. Then, we plot close price MA10 and MA50. If MA10 is larger than MA50, the stock price is believed by some traders, that it goes up in the next several days. Otherwise, the price will decrease. Our strategy is, if MA10 is larger than MA50, we will buy and hold one share of stock. Alternately speaking, we will long one share of stock. This yellow area labels the days on which we buy and hold one share of stock. We can create a new variable called shares, to denote whether we long or not. It is created using list comprehension. Shares is equal to 1 if MA10 is larger than MA50, otherwise it is zero. Next, we will compute daily profit. First, we create variable Close1, which is the close price of tomorrow. Then, we'll create a new variable called Profit, which indeed is the daily profit. If shares is equal to one, the daily profit is equal to the close price of tomorrow minus close price of today. It can be positive or negative. If negative, we lose money on that day. If shares is equal to 0, it means we do not have stock at hand, the profit is equal to zero. We can plot the profit and find out on some days we make money, on other days we lose money. We can compute the cumulative wealth. We use DataFrame method, Cumsum to compute cumulative sum and create a new variable Wealth. Then, we check tail part of DataFrame, and check whether we make money or lose money. Overall, this strategy makes about $24. In the last row, the profit and the wealth have NaN values, because those returns are computed from Close1, and Close1 is calculated using shift(-1). So, to get a terminal wealth using loc, the index level should be ms.index[-2]. Then, we print out wealth, which in fact is a sum of profit. To realize this profit, we need to buy one share of stock initially. So, our initial investment is a stock price on the first day. This strategy seems to be very promising, but there are lots of questions if you want to implement it in real market. Can we find a better signal for trading? How do you evaluate your performance of shared strategy correctly? All this will be done in the next several topics. In this topic, we provide a quick lesson of Python mainly for data operation. You should know how to read the data into DataFrame, explore basic attributes and methods of DataFrame. Most importantly, know how to create new variables using column-wise transformation or list comprehension.