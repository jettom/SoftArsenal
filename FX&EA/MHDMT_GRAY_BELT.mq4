/*
   Generated by EX4-TO-MQ4 decompiler FREEWARE V4.0.451.1 [-]
   Website: http://www.metaquotes.net
   E-mail : support@metaquotes.net
*/

#property indicator_chart_window
#property indicator_buffers 5
#property indicator_color1 White
#property indicator_color2 Yellow
#property indicator_color3 Lime
#property indicator_color4 Red
#property indicator_color5 Lime

double g_ibuf_76[];
double g_ibuf_80[];
double g_ibuf_84[];
double g_ibuf_88[];
double g_ibuf_92[];
int gi_unused_96 = 0;
int gi_100 = 0;

// E37F0136AA3FFAF149B351F6A4C948E9
int init() {
   string ls_unused_0;
   IndicatorBuffers(6);
   SetIndexStyle(0, DRAW_LINE);
   SetIndexBuffer(0, g_ibuf_76);
   SetIndexStyle(1, DRAW_LINE);
   SetIndexBuffer(1, g_ibuf_80);
   SetIndexStyle(2, DRAW_LINE);
   SetIndexBuffer(2, g_ibuf_84);
   SetIndexStyle(3, DRAW_LINE);
   SetIndexBuffer(3, g_ibuf_88);
   SetIndexBuffer(4, g_ibuf_92);
   IndicatorShortName("GRAY_BELT");
   return (0);
}

// EA2B2676C28C0DB26D39331A336C6B92
int start() {
   int li_0 = IndicatorCounted();
   if (Bars <= gi_100) return (0);
   if (li_0 > 0) li_0--;
   int li_4 = Bars - li_0;
   for (int li_8 = 0; li_8 < li_4; li_8++) {
      g_ibuf_76[li_8] = (20.0 * (High[li_8 + 0]) + 19.0 * (High[li_8 + 1]) + 18.0 * (High[li_8 + 2]) + 17.0 * (High[li_8 + 3]) + 16.0 * (High[li_8 + 4]) + 15.0 * (High[li_8 +
         5]) + 14.0 * (High[li_8 + 6]) + 13.0 * (High[li_8 + 7]) + 12.0 * (High[li_8 + 8]) + 11.0 * (High[li_8 + 9]) + 10.0 * (High[li_8 + 10]) + 9.0 * (High[li_8 + 11]) +
         8.0 * (High[li_8 + 12]) + 7.0 * (High[li_8 + 13]) + 6.0 * (High[li_8 + 14]) + 5.0 * (High[li_8 + 15]) + 4.0 * (High[li_8 + 16]) + 3.0 * (High[li_8 + 17]) + 2.0 * (High[li_8 +
         18]) + (High[li_8 + 20])) / 210.0;
      g_ibuf_80[li_8] = (20.0 * (Low[li_8 + 0]) + 19.0 * (Low[li_8 + 1]) + 18.0 * (Low[li_8 + 2]) + 17.0 * (Low[li_8 + 3]) + 16.0 * (Low[li_8 + 4]) + 15.0 * (Low[li_8 +
         5]) + 14.0 * (Low[li_8 + 6]) + 13.0 * (Low[li_8 + 7]) + 12.0 * (Low[li_8 + 8]) + 11.0 * (Low[li_8 + 9]) + 10.0 * (Low[li_8 + 10]) + 9.0 * (Low[li_8 + 11]) + 8.0 * (Low[li_8 + 12]) + 7.0 * (Low[li_8 + 13]) + 6.0 * (Low[li_8 + 14]) + 5.0 * (Low[li_8 + 15]) + 4.0 * (Low[li_8 + 16]) + 3.0 * (Low[li_8 + 17]) + 2.0 * (Low[li_8 + 18]) + (Low[li_8 + 20])) / 210.0;
   }
   for (li_8 = 0; li_8 < li_4; li_8++) {
      g_ibuf_84[li_8] = iMAOnArray(g_ibuf_76, Bars, 90, 0, MODE_EMA, li_8);
      g_ibuf_88[li_8] = iMAOnArray(g_ibuf_80, Bars, 90, 0, MODE_EMA, li_8);
      g_ibuf_92[li_8] = g_ibuf_84[li_8] - g_ibuf_88[li_8];
   }
   return (0);
}
