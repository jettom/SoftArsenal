/*
   Generated by EX4-TO-MQ4 decompiler FREEWARE V4.0.451.1 [-]
   Website: http://www.metaquotes.net
   E-mail : support@metaquotes.net
*/

#property indicator_chart_window
#property indicator_buffers 2
#property indicator_color1 White
#property indicator_color2 Yellow

extern int N = 9;
extern int N1 = 9;
extern int mode = 1;
double g_ibuf_88[];
double g_ibuf_92[];
int gi_96 = 0;
int gi_100 = 0;

int init() {
   string ls_unused_0;
   IndicatorBuffers(6);
   SetIndexStyle(0, DRAW_LINE);
   SetIndexBuffer(0, g_ibuf_88);
   SetIndexStyle(1, DRAW_LINE);
   SetIndexBuffer(1, g_ibuf_92);
   IndicatorShortName("XMA(" + N + ")");
   gi_96 = N;
   gi_100 = gi_96 + N1;
   SetIndexDrawBegin(0, gi_96);
   SetIndexDrawBegin(1, gi_100);
   return (0);
}

int start() {
   double ld_12;
   int li_8 = IndicatorCounted();
   if (Bars <= gi_100) return (0);
   if (li_8 < 1) {
      for (int li_0 = 1; li_0 <= gi_96; li_0++) g_ibuf_88[Bars - li_0] = 0;
      for (li_0 = 1; li_0 <= gi_100; li_0++) g_ibuf_92[Bars - li_0] = 0;
   }
   if (li_8 > 0) li_8--;
   int li_20 = Bars - li_8 + MathMax(N, N1) + 2.0;
   for (li_0 = li_20; li_0 >= 0; li_0--) {
      if (li_0 >= (N - 1) / 2) {
         ld_12 = 0;
         for (int li_24 = li_0 + (N - 1) / 2; li_24 >= li_0 - (N - 1) / 2; li_24--) ld_12 += YY(li_24, mode);
         g_ibuf_88[li_0] = ld_12 / N;
      } else {
         ld_12 = 0;
         for (li_24 = li_0 + (N - 1) / 2; li_24 >= 0; li_24--) ld_12 += YY(li_24, mode);
         g_ibuf_88[li_0] = (ld_12 + ld_12 * (N - li_0 * 2 - 1) / (N + li_0 * 2 + 1)) / N;
      }
   }
   for (li_0 = li_20; li_0 >= 0; li_0--) {
      if (li_0 >= (N - 1) / 2) {
         ld_12 = 0;
         for (li_24 = li_0 + (N - 1) / 2; li_24 >= li_0 - (N - 1) / 2; li_24--) ld_12 += g_ibuf_88[li_24];
         g_ibuf_92[li_0] = ld_12 / N;
      } else {
         ld_12 = 0;
         for (li_24 = li_0 + (N - 1) / 2; li_24 >= 0; li_24--) ld_12 += g_ibuf_88[li_24];
         g_ibuf_92[li_0] = (ld_12 + ld_12 * (N - li_0 * 2 - 1) / (N + li_0 * 2 + 1)) / N;
      }
   }
   return (0);
}

double YY(int ai_0, int ai_4) {
   double ld_ret_8 = 0;
   switch (ai_4) {
   case 0:
      ld_ret_8 = Open[ai_0];
      break;
   case 1:
      ld_ret_8 = Close[ai_0];
      break;
   case 2:
      ld_ret_8 = High[ai_0];
      break;
   case 3:
      ld_ret_8 = Low[ai_0];
   }
   return (ld_ret_8);
}
